{
  "ensemble": {
    "mode": "weighted_voting",
    "confidence_threshold": 0.6,
    "description": "Ensemble strategy: weighted_voting, confidence, voting"
  },
  "models": {
    "ml_lgbm_optimized": {
      "enabled": true,
      "path": "trained_models/final/final_lgbm_optuna.pkl",
      "scaler_path": "trained_models/scaler_standard.pkl",
      "encoder_path": "trained_models/encoder.pkl",
      "weight": 1.2,
      "description": "Optimized LightGBM classifier (Optuna-tuned)"
    },
    "ml_xgb_optimized": {
      "enabled": true,
      "path": "trained_models/final/final_xgb_optuna.pkl",
      "scaler_path": "trained_models/scaler_standard.pkl",
      "encoder_path": "trained_models/encoder.pkl",
      "weight": 1.2,
      "description": "Optimized XGBoost classifier (Optuna-tuned)"
    },
    "ml_baseline": {
      "enabled": false,
      "path": "trained_models/best_baseline.pkl",
      "scaler_path": "trained_models/scaler_standard.pkl",
      "encoder_path": "trained_models/encoder.pkl",
      "weight": 1.0,
      "description": "Baseline ML classifier (disabled, use optimized versions)"
    },
    "dl_ffnn": {
      "enabled": true,
      "path": "trained_models/dl_models/final_ffnn_residual.keras",
      "scaler_path": "trained_models/scaler_standard.pkl",
      "encoder_path": "trained_models/encoder.pkl",
      "weight": 1.3,
      "description": "Deep Learning FFNN with Residual Connections"
    },
    "dl_cnn": {
      "enabled": true,
      "path": "trained_models/dl_models/final_cnn_stable.keras",
      "scaler_path": "trained_models/scaler_standard.pkl",
      "encoder_path": "trained_models/encoder.pkl",
      "weight": 1.3,
      "description": "Deep Learning CNN for feature extraction"
    },
    "anomaly_detector": {
      "enabled": true,
      "path": "trained_models/dl_models/anomaly_autoencoder.keras",
      "scaler_path": "trained_models/dl_models/anomaly_scaler.joblib",
      "threshold_path": "trained_models/dl_models/anomaly_threshold.npy",
      "weight": 0.9,
      "threshold_multiplier": 2.5,
      "description": "Autoencoder-based anomaly detection"
    }
  },
  "thresholds": {
    "anomaly_threshold_multiplier": 2.5,
    "rule_confidence_threshold": 0.7,
    "high_severity_confidence": 0.8,
    "medium_severity_confidence": 0.6,
    "description": "Detection thresholds for different confidence levels"
  },
  "detection": {
    "use_deep_learning": true,
    "use_rule_based": true,
    "use_anomaly_detection": true,
    "ensemble_mode": "weighted_voting",
    "description": "Which detection methods to enable"
  },
  "performance": {
    "enable_monitoring": true,
    "enable_adaptive_weights": true,
    "min_samples_for_adaptation": 10,
    "description": "Performance monitoring and adaptive weighting"
  },
  "logging": {
    "log_predictions": true,
    "log_level": "INFO",
    "prediction_log_path": "logs/predictions.jsonl",
    "description": "Logging configuration"
  }
}
